{"version":3,"file":"static/js/418.62681703.chunk.js","mappings":"8KASe,SAASA,EAAT,GAAuC,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,aAEnC,GAAiCC,EAAAA,EAAAA,WAAS,GAA1C,eAAOC,EAAP,KAAgBC,EAAhB,KACIC,EAAeF,EAAU,yBAA2B,iBACpDG,EAAcH,EAAU,wBAA0B,gBAM1D,OACA,iBAAKI,UAAU,mBAAf,WACI,gBAAKA,UAAWD,EAAaE,QANN,WACnBJ,GAAeD,EAClB,EAID,SAAsDH,IACrDG,IAAW,gBAAKI,UAAWF,EAAhB,SAA+BJ,QAG9C,CCvBc,SAASQ,IACpB,OACI,+BACA,qBAASF,UAAU,OAAnB,WACA,iBAAMA,UAAU,iBACZ,cAAGA,UAAU,kBAAb,qQAOX,CCdc,SAASG,IACpB,OACI,+BACA,qBAASH,UAAU,OAAnB,WACA,iBAAMA,UAAU,iBACZ,cAAGA,UAAU,kBAAb,kSAQX,CCPD,IAAMI,EAAYC,EAAAA,MAAW,kBAAI,4BAAJ,IACvBC,EAAuBD,EAAAA,MAAW,kBAAI,4BAAJ,IAClCE,EAAOF,EAAAA,MAAW,kBAAI,2BAAJ,IAGT,SAASG,IAqBpB,OACI,iBAAKR,UAAU,sBAAf,WACA,SAACE,EAAD,KACA,SAACV,EAAD,CAAQC,MAAM,cAAcC,aAtBZ,kBAChB,SAAC,EAAAe,SAAD,CAAUC,UAAU,2CAApB,UACA,SAACN,EAAD,KAFgB,KAuBhB,SAACD,EAAD,KACA,SAACX,EAAD,CAAQC,MAAM,wBAAwBC,aAlBZ,kBAC1B,SAAC,EAAAe,SAAD,CAAUC,UAAU,2CAApB,UACA,SAACJ,EAAD,KAF0B,KAmB1B,SAACd,EAAD,CAAQC,MAAM,YAAYC,aAblB,kBACT,SAAC,EAAAe,SAAD,CAAUC,UAAU,2CAApB,UACA,SAACH,EAAD,KAFS,MAiBf,C","sources":["components/drawer/Drawer.js","components/content/tutorials/text/TicTakToeInfo.js","components/content/tutorials/text/BoilerVerdictInfo.js","components/content/tutorials/Tutorials.js"],"sourcesContent":["import './drawer.scss';\nimport React, { useState } from 'react';\n\n\n/*This component should really render a lazily build component. \n * childBuilder function is passed as a prop. Drawer supposed\n * to hold whichever you put in it. Visibility of the child component\n * is controlled by drawers state.\n */\nexport default function Drawer({title, childBuilder}){\n    \n    const [visible, setVisibility] = useState(false);\n    let contentClass = visible ? 'drawer-content visible' : 'drawer-content';\n    let toggleClass = visible ? 'drawer-toggle visible' : 'drawer-toggle';\n    \n    const toggleContent  = ()=> {\n        setVisibility(!visible);\n    }\n\nreturn(\n<div className='drawer-container'>\n    <div className={toggleClass} onClick={toggleContent}>{title}</div>\n    {visible && <div className={contentClass}>{childBuilder()}</div>}\n</div>\n);\n}\n\n/*\n *\n * */\n","// Text element for tic-tac-toe game.\n//\nexport default function TicTakToeInfo(){\n    return (\n        <>\n        <section className=\"text\">\n        <span className=\"text__title\"></span>\n            <p className=\"text__paragraph\">\n    Many, many moons ago few of the best minutes were spend on this simple game :).\n    It was somehow simbolic to make this game as the first little project with React.\n    And hey, I finally have learned something from it! Take that, my school teachers!\n        </p>\n        </section>\n    </>);\n}\n","export default function BoilerVerdictInfo(){\n    return (\n        <>\n        <section className=\"text\">\n        <span className=\"text__title\"></span>\n            <p className=\"text__paragraph\">\n        Will the water boil? We all know, that water shall boil at 100 &#176;C.\n        For these who still curious about the process this small application\n        answers some other questions. What temperature must be to boil the\n        water in Fahrenheit? And what this temperature will be in Kelvin?\"\n        </p>\n        </section>\n    </>);\n}\n","import React, {Suspense} from 'react';\nimport Drawer from '../../drawer/Drawer';\nimport TicTakToeInfo from './text/TicTakToeInfo';\nimport BoilerVerdictInfo from './text/BoilerVerdictInfo';\n\n// lazily load bundles for children of drawers.\nconst TicTakToe = React.lazy(()=>import('./tic-tak-toe/TicTakToe'));\nconst TemperatureConverter = React.lazy(()=>import('./temperature_converter/TemperatureConverter'));\nconst Todo = React.lazy(()=>import('./todo/Todo'));\n\n\nexport default function Tutorials(){\n    // Drawer child builder funcitons which are lazily building children.\n    const tic_tak_toe = () => (\n        <Suspense fallback={<div> Loading ... </div>}>\n        <TicTakToe />\n        </Suspense>\n    );\n\n    const temperature_converter = () => (\n        <Suspense fallback={<div> Loading ... </div>}>\n        <TemperatureConverter />\n        </Suspense>\n    );\n\n   const todo = () => (\n       <Suspense fallback={<div> Loading ... </div>}>\n       <Todo />\n       </Suspense>\n   );\n\n\n    return (\n        <div className=\"main-content-holder\">\n        <TicTakToeInfo />\n        <Drawer title=\"Tic-Tac-Toe\" childBuilder={tic_tak_toe}/>\n        <BoilerVerdictInfo />\n        <Drawer title=\"Water boiling Verdict\" childBuilder={temperature_converter}/>\n        <Drawer title=\"Todo List\" childBuilder={todo}/>\n        </div>\n    );\n\n}\n/*\n * Drawer title - text visible on toggle button\n * *Info Components are components with information about drawer. Major idea was to use\n * fetch even done component for representing text, but it's impossible to properly\n * pass html code through http response and it's not rendered properly by JSX. So decided\n * to do separate component for each text on this site. Css property for these text-info\n * components is in index.scss\n */\n"],"names":["Drawer","title","childBuilder","useState","visible","setVisibility","contentClass","toggleClass","className","onClick","TicTakToeInfo","BoilerVerdictInfo","TicTakToe","React","TemperatureConverter","Todo","Tutorials","Suspense","fallback"],"sourceRoot":""}