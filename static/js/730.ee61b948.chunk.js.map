{"version":3,"file":"static/js/730.ee61b948.chunk.js","mappings":"6WAEe,SAASA,EAAeC,GACrC,IAAMC,EAAWD,EAAME,aAAe,IAChCC,EAAaF,EAAW,eAAiB,YACzCG,EAAeH,EAAQ,qCAE7B,OACM,iBAAMI,UAAS,4BAAuBF,GAAtC,SACGC,GAGV,CCVc,SAASE,EAAiBN,GACrC,OAAqCO,EAAAA,EAAAA,YAArC,eAAOC,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAc,GAAD,OAAIT,EAAME,aAC1B,GAAE,CAACF,IAUJ,OACI,iBAAKK,UAAU,mBAAf,WACA,oBAAQA,UAAU,2BAAlB,UAVe,CACfM,QAAS,gBACTC,WAAY,mBACZC,OAAQ,gBAQIb,EAAMc,WADlB,QAIA,kBAAOC,KAAK,SACZC,KAAK,sBACLC,MAAOT,GAAe,GACtBH,UAAU,0BACVa,SAAU,SAACC,GAAD,OACNnB,EAAMoB,oBAAoBD,EAAOnB,EAAMc,UADjC,MAIjB,CCtBD,IAAMO,EACK,UADLA,EAEQ,aAFRA,EAGI,SAGOC,EAAsB,SAACC,GAChC,OAAqB,IAAZA,EAAM,IAAU,CAC5B,EAEYC,EAAkB,SAACD,GAC5B,OAAQA,EAAM,MACjB,EAEYE,EAAsB,SAACd,GACpC,OAAO,KAACA,EAAoB,EAC3B,EAEYe,EAAkB,SAACf,GAChC,OAAOA,EAAU,MAChB,EAGYgB,EAAgB,SAACC,GAC9B,OAAQC,KAAKC,MAAc,IAARF,GAAe,KAAKG,UACtC,EAEU,SAASC,IAEpB,OAA8BzB,EAAAA,EAAAA,UAAS,IAAvC,eAAOI,EAAP,KAAgBsB,EAAhB,KACA,GAAoC1B,EAAAA,EAAAA,UAAS,IAA7C,eAAOK,EAAP,KAAmBsB,EAAnB,KACA,GAA4B3B,EAAAA,EAAAA,UAAS,IAArC,eAAOM,EAAP,KAAesB,EAAf,KAEMC,EAAQ,WACVH,EAAW,IACXC,EAAc,IACdC,EAAU,GACb,EAGKE,EAAoB,SAAClB,EAAOL,GAClCK,EAAMmB,iBACN,IAAIrB,EAAQE,EAAMoB,OAAOtB,MAUzB,GAPa,KAAVA,GACCmB,IAGU,MAAVnB,IACAA,EAAQ,MAEC,QAAVA,GAA6B,OAAVA,GAuBxB,GAFEA,EAAQuB,WAAWvB,IAEjBwB,OAAOC,MAAMzB,GAAjB,CAME,GAAGA,IAAU0B,IAGT,OAFAC,MAAM,uEACNR,IAIA,OAAOtB,GACH,KAAKO,EACD,IAAMT,EAAaa,EAAoBR,GACjCJ,EAASa,EAAgBT,GAC/BgB,EAAWhB,GACXiB,EAAcP,EAAcf,IAC5BuB,EAAUR,EAAcd,IACxB,MAEJ,KAAKQ,EACDa,EAAcjB,GACd,IAAMN,EAAUW,EAAoBL,GAC9BJ,EAASa,EAAgBf,GAC/BsB,EAAWN,EAAchB,IACzBwB,EAAUR,EAAcd,IACxB,MAEJ,KAAKQ,EACDc,EAAUlB,GACV,IAAMN,EAAUa,EAAgBP,GAC1BL,EAAaa,EAAoBd,GACvCsB,EAAWN,EAAchB,IACzBuB,EAAcP,EAAcf,IA/BzC,OAzBK,OAAOE,GACH,KAAKO,EACDY,EAAWhB,GACX,MAEJ,KAAKI,EACDa,EAAcjB,GACd,MAEJ,KAAKI,EACDc,EAAUlB,GAoDrB,EAID,OACE,iBAAKZ,UAAU,YAAf,WACE,SAACC,EAAD,CACEJ,YAAaS,EACbG,UAAWO,EACXD,oBAAqBiB,KAEvB,SAAC/B,EAAD,CACEJ,YAAaU,EACbE,UAAWO,EACXD,oBAAqBiB,KAEvB,SAAC/B,EAAD,CACEJ,YAAaW,EACbC,UAAWO,EACXD,oBAAqBiB,KAEvB,SAACtC,EAAD,CAAgBG,YAAaS,MAGpC,C","sources":["components/content/tutorials/temperature_converter/BoilingVerdict.js","components/content/tutorials/temperature_converter/TemperatureInput.js","components/content/tutorials/temperature_converter/TemperatureConverter.js"],"sourcesContent":["import React from \"react\";\n\nexport default function BoilingVerdict(props) {\n  const willBoil = props.temperature >= 100;\n  const class_name = willBoil ? \"text-success\" : \"text-info\";\n  const willBoilText = willBoil ? `Water will boil`: `Water won't boil`;\n\n  return (\n        <span className={`conveter__verdict ${class_name}`}>\n          {willBoilText}\n        </span>\n  );\n}\n","import React, {useState, useEffect} from \"react\";\n\nexport default function TemperatureInput(props) {\n    const [input_value, setInputValue] = useState();\n\n    useEffect(()=>{\n        setInputValue(`${props.temperature}`);\n    }, [props]);\n\n    const scaleNames = {\n        celsius: \"Celsius \\u00B0C\",\n        fahrenheit: \"Fahrenheit \\u00B0F\",\n        kelvin: \"Kelvin \\u00B0K\"\n    };\n\n\n    //Without step attribute will mark floats as invalid.\n    return (\n        <div className=\"converter__input\">\n        <legend className=\"converter__input__legend\">\n        {scaleNames[props.inputType]}:\n        </legend>\n\n        <input type=\"number\"\n        step=\"0.00000000000000001\"\n        value={input_value || \"\"}\n        className=\"converter__input__field\"\n        onChange={(event) => \n            props.onTemperatureChange(event, props.inputType)} />\n        </div>\n    );\n}\n","import React, {useState} from \"react\";\nimport BoilingVerdict from \"./BoilingVerdict\";\nimport TemperatureInput from \"./TemperatureInput\";\n// import {scales} from \"./converter_constants\";\nimport \"./converter.scss\";\n\n// This mapping to strigs is required for later this value will be used \n// against map key in TemperatureInput Component for getting correct\n// legend text for input fields.\nconst scales = {\n  CELSIUS: \"celsius\",\n  FAHRENHEIT: \"fahrenheit\",\n  KELVIN: \"kelvin\"\n};\n\n    export const fahrenheitToCelsius = (tmp) => {\n        return (+tmp - 32) * 5 / 9;\n    }\n\n    export const kelvinToCelsius = (tmp) => {\n        return +tmp - 273.15;\n    }\n\n    export const celsiusToFahrenheit = (celsius) => {\n    return +celsius * (9 / 5) + 32;\n    }\n\n    export const celsiusToKelvin = (celsius) => {\n    return celsius + 273.15;\n    }\n    \n    // input must be a number  return string.\n    export const roundToString = (input) => {\n    return (Math.round(input * 100) / 100).toString();\n    }\n\nexport default function Calculator() {\n    // initial state of temperature is empty string, but later float value will saved.\n    const [celsius, setCelsius] = useState(\"\");\n    const [fahrenheit, setFahrenheit] = useState(\"\");\n    const [kelvin, setKelvin] = useState(\"\");\n\n    const reset = ()=>{\n        setCelsius('');\n        setFahrenheit('');\n        setKelvin('');\n    }\n\n\n    const handleInputChange = (event, inputType) => {\n    event.preventDefault();\n    let value = event.target.value;\n    // need this condition to totally empty the input otherwise last digit will stick there\n    // forever.\n    if(value === ''){\n        reset();\n    }\n    // handle unusual start of the number\n    if (value === '.') {\n        value = '0.';\n    }\n    if(value === '0.0' || value === '0.'){\n        switch(inputType){\n            case scales.CELSIUS: {\n                setCelsius(value);\n                break;\n            }\n            case scales.FAHRENHEIT: {\n                setFahrenheit(value);\n                break;\n            }\n            case scales.KELVIN: {\n                setKelvin(value);\n                break;\n            }\n            default: break;\n            \n        }\n        // do not go further\n        return;\n    } // end of handling special input.\n\n    value = parseFloat(value);\n\n  if (Number.isNaN(value)) {\n      // when number is not NaN do nothing.\n    return;\n  }\n    // when input type is number it does reset to empty when value is more than Infinity\n    // In Firefox it never reaches here, but just in case if it will it's here.\n    if(value === Infinity){\n        alert(\"Who among us shall dwell with the devouring fire? Isaiah 33:14\");\n        reset();\n        return;\n    }\n        // will have to swith between input types and update state.\n        switch(inputType){\n            case scales.CELSIUS: {\n                const fahrenheit = celsiusToFahrenheit(value);\n                const kelvin = celsiusToKelvin(value);\n                setCelsius(value);\n                setFahrenheit(roundToString(fahrenheit));\n                setKelvin(roundToString(kelvin));\n                break;\n            }\n            case scales.FAHRENHEIT: {\n                setFahrenheit(value);\n                const celsius = fahrenheitToCelsius(value);\n                const kelvin = celsiusToKelvin(celsius);\n                setCelsius(roundToString(celsius));\n                setKelvin(roundToString(kelvin));\n                break;\n            }\n            case scales.KELVIN: {\n                setKelvin(value);\n                const celsius = kelvinToCelsius(value);\n                const fahrenheit = celsiusToFahrenheit(celsius);\n                setCelsius(roundToString(celsius));\n                setFahrenheit(roundToString(fahrenheit));\n                break;\n            }\n            default: break;\n\n        }\n    } // end of handler func\n\n\n\n    return (\n      <div className=\"converter\">\n        <TemperatureInput\n          temperature={celsius}\n          inputType={scales.CELSIUS}\n          onTemperatureChange={handleInputChange}\n        />\n        <TemperatureInput\n          temperature={fahrenheit}\n          inputType={scales.FAHRENHEIT}\n          onTemperatureChange={handleInputChange}\n        />\n        <TemperatureInput\n          temperature={kelvin}\n          inputType={scales.KELVIN}\n          onTemperatureChange={handleInputChange}\n        />\n        <BoilingVerdict temperature={celsius} />\n      </div>\n    );\n}\n"],"names":["BoilingVerdict","props","willBoil","temperature","class_name","willBoilText","className","TemperatureInput","useState","input_value","setInputValue","useEffect","celsius","fahrenheit","kelvin","inputType","type","step","value","onChange","event","onTemperatureChange","scales","fahrenheitToCelsius","tmp","kelvinToCelsius","celsiusToFahrenheit","celsiusToKelvin","roundToString","input","Math","round","toString","Calculator","setCelsius","setFahrenheit","setKelvin","reset","handleInputChange","preventDefault","target","parseFloat","Number","isNaN","Infinity","alert"],"sourceRoot":""}